syntax = "proto3";

package livestack;

import "google/protobuf/empty.proto"; 

service CacapcityService {
  rpc ReportAsInstance(ReportAsInstanceMessage) returns (stream CommandToInstance);
  rpc RespondToCapacityQuery(InstanceResponseToCapacityQueryMessage) returns (google.protobuf.Empty);;
  rpc RespondToProvision(InstanceResponseToProvisionMessage) returns (google.protobuf.Empty);;
  rpc RespondToCapacityLog(RespondToCapacityLogMessage) returns (CapacityLog);;
}

message SpecCapacity{
  string specName = 1;
  int32 capacity = 2;
}

message CapacityLog{
  repeated SpecCapacity specCapacity = 1;
}

message RespondToCapacityLogMessage{
  string projectUuid = 1;
}

message ReportAsInstanceMessage {
  string projectUuid = 1;
  string instanceId = 2;
}

message SpecNameAndCapacity {
  string specName = 1;
  int32 capacity = 2;
}

message InstanceResponseToCapacityQueryMessage {
  string correlationId = 1;
  string projectUuid = 2;
  string instanceId = 3;
  repeated SpecNameAndCapacity specNameAndCapacity = 4;
}

message InstanceResponseToProvisionMessage {
  string correlationId = 1;
  string projectUuid = 2;
  string instanceId = 3;
  string specName = 4;
    // status: 0: success, 1: partial success, 2: failed
  int32 status = 5;
  int32 numberOfWorkersStarted = 6;
}


message ProvisionCommand {
  string specName = 1;
  int32 numberOfWorkersNeeded = 2;
}

message QueryCapacityCommand {
  
}

message NoCapacityWarning {

  string specName = 3;
}

message CommandToInstance {
  string projectUuid = 1;
  string instanceId = 2;
  string correlationId = 3;
  oneof value {
    ProvisionCommand provision = 4;
    QueryCapacityCommand queryCapacity = 5;
    NoCapacityWarning noCapacityWarning = 6;
  }
}